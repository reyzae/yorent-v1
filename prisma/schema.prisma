// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  bookings Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vehicle {
  id            String        @id @default(cuid())
  name          String
  brand         String
  model         String
  year          Int
  category      VehicleCategory
  pricePerDay   Float
  images        String[]
  status        VehicleStatus @default(AVAILABLE)
  description   String?
  features      String[]
  fuelType      FuelType
  transmission  Transmission
  seats         Int
  mileage       Int?
  licensePlate  String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  bookings Booking[]
}

model Booking {
  id            String         @id @default(cuid())
  userId        String
  vehicleId     String
  startDate     DateTime
  endDate       DateTime
  totalPrice    Float
  status        BookingStatus  @default(PENDING)
  paymentStatus PaymentStatus  @default(PENDING)
  pickupLocation String?
  dropoffLocation String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  payment Payment?
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  amount          Float
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?       @unique
  stripePaymentId String?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum VehicleCategory {
  SEDAN
  SUV
  MPV
  HATCHBACK
  PICKUP
  VAN
  LUXURY
  SPORTS
}

enum VehicleStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  OUT_OF_SERVICE
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum Transmission {
  MANUAL
  AUTOMATIC
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  DIGITAL_WALLET
}
